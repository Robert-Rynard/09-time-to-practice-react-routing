{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/comments/Comments.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","onAddedComment","quoteId","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","useEffect","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useParams","getAllComments","loadedComments","data","useState","isAddingComment","setIsAddingComment","addedCommentHandler","useCallback","length","onClick"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,SAAW,6B,iFCSdC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,U,iBCQDC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,U,wCCqCnBC,EArCQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QAClCC,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAEvBC,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcV,EAAeW,QAAQC,MAE3CR,EAAY,CAAEL,UAASc,YAAa,CAAEtB,KAAMmB,MAS9C,OANAI,qBAAU,WACO,cAAXT,GAA2BC,GAC7BR,MAED,CAACO,EAAQC,EAAOR,IAGjB,uBAAMV,UAAWC,IAAQ0B,KAAMC,SAAUT,EAAzC,UACc,YAAXF,GACC,qBAAKjB,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAGJ,sBAAK7B,UAAWC,IAAQ6B,QAASF,SAAUT,EAA3C,UACE,uBAAOY,QAAQ,UAAf,0BACA,0BAAUvB,GAAG,UAAUwB,KAAK,IAAIC,IAAKrB,OAEvC,qBAAKZ,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAlB,+B,wBC2BOmC,UAvDE,WACf,IAAQxB,EAAYyB,cAAZzB,QACR,EAAsDG,YAAQuB,KAAtDrB,EAAR,EAAQA,YAAmBsB,EAA3B,EAAqBC,KAAsBtB,EAA3C,EAA2CA,OAC3C,EAA8CuB,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEAhB,qBAAU,WACRV,EAAYL,KACX,CAACK,EAAaL,IAEjB,IASIN,EALEsC,EAAsBC,uBAAY,WACtC5B,EAAYL,GACZ+B,GAAmB,KAClB,CAAC1B,EAAaL,IAoBjB,MAhBe,YAAXM,IACFZ,EACE,qBAAKL,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,OAKS,cAAXZ,GAA0BqB,EAAeO,OAAS,IACpDxC,EAAW,cAAC,EAAD,CAAcA,SAAUiC,KAGtB,cAAXrB,GAAoD,IAA1BqB,EAAeO,SAC3CxC,EAAW,mBAAGL,UAAU,WAAb,0CAIX,0BAASA,UAAWC,IAAQI,SAA5B,UACE,gDACEoC,GACA,wBAAQzC,UAAU,MAAM8C,QA/BC,WAC7BJ,GAAmB,IA8Bf,2BAIDD,GACC,cAAC,EAAD,CACE9B,QAASA,EACTD,eAAgBiC,IAGnBtC","file":"static/js/4.f094b4da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3KGds\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2IhFD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__33yhZ\",\"loading\":\"NewCommentForm_loading__16k64\",\"control\":\"NewCommentForm_control__Ahptb\",\"actions\":\"NewCommentForm_actions__1HdBR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3RaZq\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from \"react\";\n\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\n\nconst NewCommentForm = ({ onAddedComment, quoteId }) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({ quoteId, commentData: { text: enteredText } });\n  };\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\n\nimport CommentsList from \"./CommentsList\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport classes from \"./Comments.module.css\";\nimport { getAllComments } from \"../../lib/api\";\nimport useHttp from \"../../hooks/use-http\";\nimport { useParams } from \"react-router-dom\";\n\nconst Comments = () => {\n  const { quoteId } = useParams();\n  const { sendRequest, data: loadedComments, status } = useHttp(getAllComments);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n    setIsAddingComment(false);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && loadedComments.length === 0) {\n    comments = <p className=\"centered\">No comments have been added</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"sourceRoot":""}